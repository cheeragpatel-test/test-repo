name: Create Sub Issues from Tasklist

on:
  issues:
    types: [opened]

jobs:
  create-sub-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Octokit
        run: npm install @octokit/rest

      - name: Run script to create sub-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const { Octokit } = require("@octokit/rest");
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          // Retrieve the issue payload from GitHub Actions environment variables
          const issue = JSON.parse(process.env.GITHUB_EVENT_PATH ? 
            require('fs').readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8') : 
            '{}' );

          const issueBody = issue.issue.body;
          const parentIssueNumber = issue.issue.number;
          const labels = issue.issue.labels.map(label => label.name);

          // Check if the issue has the 'CS-Release-Readiness' label
          if (!labels.includes('CS-Release-Readiness')) {
            console.log('Issue does not have the CS-Release-Readiness label. Exiting.');
            process.exit(0);
          }

          // Extract the content between ```[tasklist] and ```
          const tasklistMatch = issueBody.match(/```\\[tasklist\\]([\\s\\S]*?)```/);
          if (!tasklistMatch) {
            console.log('No [tasklist] section found in the issue body.');
            process.exit(0);
          }

          const tasklistContent = tasklistMatch[1];
          // Identify lines that match '- [ ] ...'
          const tasks = tasklistContent.match(/^- \\[ \\] .+/gm) || [];

          const createSubIssues = async () => {
            for (const task of tasks) {
              const title = task.replace(/^- \\[ \\] /, '').trim();

              // Create a sub-issue for each task
              const newIssue = await octokit.issues.create({
                owner: issue.repository.owner.login,
                repo: issue.repository.name,
                title: title,
                body: `Sub-issue of #${parentIssueNumber}`
              });

              // Link the sub issue to the parent issue
              await octokit.rest.issues.addSubIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentIssueNumber,
                sub_issue_id: newIssue.data.id
              })

              // Comment on the parent issue linking the new sub-issue
              await octokit.issues.createComment({
                owner: issue.repository.owner.login,
                repo: issue.repository.name,
                issue_number: parentIssueNumber,
                body: `Created sub-issue: #${newIssue.data.number} for task: "${title}"`
              });
            }
          };

          createSubIssues().catch(error => {
            console.error(error);
            process.exit(1);
          });
